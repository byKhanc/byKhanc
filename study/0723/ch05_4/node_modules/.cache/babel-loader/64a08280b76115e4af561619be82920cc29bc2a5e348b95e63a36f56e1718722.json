{"ast":null,"code":"const initialState = {};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case '@listEntities/add':\n      return {\n        ...state,\n        [action.payload.uuid]: action.payload\n      };\n    // 계산된 속성명(computed property name) 표현식으로 항목 추가\n    case '@listEntities/remove':\n      {\n        const newState = {\n          ...state\n        }; // 전개 연산자를 사용하여 깊은 복사 방식으로 새로운 객체 생성\n        delete newState[action.payload]; // 타입스크립트에서 객체의 특정 속성을 삭제할 때는 다음처럼 특정 속성을 대상으로 delete 연산자를 사용\n        return newState;\n      }\n  }\n  return state;\n};","map":{"version":3,"names":["initialState","reducer","state","action","type","payload","uuid","newState"],"sources":["C:/Users/82102/dev/projects/byKhanc/study/0723/ch05_4/src/store/listEntities/reducers.ts"],"sourcesContent":["import * as T from './types'\r\n\r\nconst initialState: T.State = {}\r\nexport const reducer = (state: T.State = initialState, action: T.Actions) => {\r\n  switch (action.type) {\r\n    case '@listEntities/add':\r\n      return {...state, [action.payload.uuid]: action.payload} // 계산된 속성명(computed property name) 표현식으로 항목 추가\r\n    case '@listEntities/remove': {\r\n      const newState = {...state} // 전개 연산자를 사용하여 깊은 복사 방식으로 새로운 객체 생성\r\n      delete newState[action.payload] // 타입스크립트에서 객체의 특정 속성을 삭제할 때는 다음처럼 특정 속성을 대상으로 delete 연산자를 사용\r\n      return newState\r\n    }\r\n  }\r\n  return state\r\n}\r\n"],"mappings":"AAEA,MAAMA,YAAqB,GAAG,CAAC,CAAC;AAChC,OAAO,MAAMC,OAAO,GAAGA,CAACC,KAAc,GAAGF,YAAY,EAAEG,MAAiB,KAAK;EAC3E,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,mBAAmB;MACtB,OAAO;QAAC,GAAGF,KAAK;QAAE,CAACC,MAAM,CAACE,OAAO,CAACC,IAAI,GAAGH,MAAM,CAACE;MAAO,CAAC;IAAC;IAC3D,KAAK,sBAAsB;MAAE;QAC3B,MAAME,QAAQ,GAAG;UAAC,GAAGL;QAAK,CAAC,EAAC;QAC5B,OAAOK,QAAQ,CAACJ,MAAM,CAACE,OAAO,CAAC,EAAC;QAChC,OAAOE,QAAQ;MACjB;EACF;EACA,OAAOL,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}